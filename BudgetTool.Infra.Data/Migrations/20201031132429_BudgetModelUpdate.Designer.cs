// <auto-generated />
using System;
using BudgetTool.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BudgetTool.UI.Migrations
{
    [DbContext(typeof(BudgetToolDbContext))]
    [Migration("20201031132429_BudgetModelUpdate")]
    partial class BudgetModelUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BudgetTool.Models.Models.BudgetModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("FixedCostsId")
                        .HasColumnType("int");

                    b.Property<int?>("IncomesId")
                        .HasColumnType("int");

                    b.Property<int?>("VariableCostsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FixedCostsId");

                    b.HasIndex("IncomesId");

                    b.HasIndex("VariableCostsId");

                    b.ToTable("BudgetModels");
                });

            modelBuilder.Entity("BudgetTool.Models.Models.FixedCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("FixedCostsTotal")
                        .HasColumnType("float");

                    b.Property<int?>("InsuranceAndMonthlyCostsId")
                        .HasColumnType("int");

                    b.Property<int?>("LivingCostsId")
                        .HasColumnType("int");

                    b.Property<int?>("LoansAndSavingsCostsId")
                        .HasColumnType("int");

                    b.Property<int?>("TravellingCostsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceAndMonthlyCostsId");

                    b.HasIndex("LivingCostsId");

                    b.HasIndex("LoansAndSavingsCostsId");

                    b.HasIndex("TravellingCostsId");

                    b.ToTable("FixedCost");
                });

            modelBuilder.Entity("BudgetTool.Models.Models.FixedCost+InsuranceAndMonthlyCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("AccidentInsurance")
                        .HasColumnType("float");

                    b.Property<float>("HomeInsurance")
                        .HasColumnType("float");

                    b.Property<float>("InsuranceAndMonthlyCostsTotal")
                        .HasColumnType("float");

                    b.Property<float>("MobileAndInternet")
                        .HasColumnType("float");

                    b.Property<float>("NewspaperAndMagazines")
                        .HasColumnType("float");

                    b.Property<float>("OtherInsuranceAndMonthlyCosts")
                        .HasColumnType("float");

                    b.Property<float>("SportAndExercise")
                        .HasColumnType("float");

                    b.Property<float>("TVAndPaymentChannels")
                        .HasColumnType("float");

                    b.Property<float>("TradeFundOrUnemploymentFund")
                        .HasColumnType("float");

                    b.Property<float>("TravelInsurance")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("InsuranceAndMonthlyCost");
                });

            modelBuilder.Entity("BudgetTool.Models.Models.FixedCost+LivingCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("ElectricityOrGas")
                        .HasColumnType("float");

                    b.Property<float>("Heating")
                        .HasColumnType("float");

                    b.Property<float>("LivingCostsTotal")
                        .HasColumnType("float");

                    b.Property<float>("OtherLivingCosts")
                        .HasColumnType("float");

                    b.Property<float>("RentOrMortgage")
                        .HasColumnType("float");

                    b.Property<float>("ServiceCharge")
                        .HasColumnType("float");

                    b.Property<float>("Water")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("LivingCost");
                });

            modelBuilder.Entity("BudgetTool.Models.Models.FixedCost+LoansAndSavingsCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("CarLoan")
                        .HasColumnType("float");

                    b.Property<float>("OtherConstantSaving")
                        .HasColumnType("float");

                    b.Property<float>("OtherLoansAndSavings")
                        .HasColumnType("float");

                    b.Property<float>("RetirementSaving")
                        .HasColumnType("float");

                    b.Property<float>("StudentLoan")
                        .HasColumnType("float");

                    b.Property<float>("TotalLoansAndSavings")
                        .HasColumnType("float");

                    b.Property<float>("UsageLoan")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("LoansAndSavingsCost");
                });

            modelBuilder.Entity("BudgetTool.Models.Models.FixedCost+TravellingCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("CarAndMotorcycleInsurance")
                        .HasColumnType("float");

                    b.Property<float>("CarAndMotorcycleRepair")
                        .HasColumnType("float");

                    b.Property<float>("Fuel")
                        .HasColumnType("float");

                    b.Property<float>("OtherTravellingCosts")
                        .HasColumnType("float");

                    b.Property<float>("PublicTransport")
                        .HasColumnType("float");

                    b.Property<float>("TrafficAndVehiceTax")
                        .HasColumnType("float");

                    b.Property<float>("TravellingCostsTotal")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("TravellingCost");
                });

            modelBuilder.Entity("BudgetTool.Models.Models.Income", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("HousingAllowance")
                        .HasColumnType("float");

                    b.Property<float>("NetIncome")
                        .HasColumnType("float");

                    b.Property<float>("OtherBenefits")
                        .HasColumnType("float");

                    b.Property<float>("OtherIncomes")
                        .HasColumnType("float");

                    b.Property<float>("StudentLoan")
                        .HasColumnType("float");

                    b.Property<float>("StudyGrant")
                        .HasColumnType("float");

                    b.Property<float>("TotalIncomes")
                        .HasColumnType("float");

                    b.Property<float>("UnemploymentBenefit")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Income");
                });

            modelBuilder.Entity("BudgetTool.Models.Models.VariableCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("Clothing")
                        .HasColumnType("float");

                    b.Property<float>("DoctorAndMedicines")
                        .HasColumnType("float");

                    b.Property<float>("FoodAndDailyEquipments")
                        .HasColumnType("float");

                    b.Property<float>("Freetime")
                        .HasColumnType("float");

                    b.Property<float>("FurnitureAndDecoration")
                        .HasColumnType("float");

                    b.Property<float>("OtherVariableCosts")
                        .HasColumnType("float");

                    b.Property<float>("TotalVariableCosts")
                        .HasColumnType("float");

                    b.Property<float>("Vacation")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("VariableCost");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BudgetTool.Models.Models.BudgetModel", b =>
                {
                    b.HasOne("BudgetTool.Models.Models.FixedCost", "FixedCosts")
                        .WithMany()
                        .HasForeignKey("FixedCostsId");

                    b.HasOne("BudgetTool.Models.Models.Income", "Incomes")
                        .WithMany()
                        .HasForeignKey("IncomesId");

                    b.HasOne("BudgetTool.Models.Models.VariableCost", "VariableCosts")
                        .WithMany()
                        .HasForeignKey("VariableCostsId");
                });

            modelBuilder.Entity("BudgetTool.Models.Models.FixedCost", b =>
                {
                    b.HasOne("BudgetTool.Models.Models.FixedCost+InsuranceAndMonthlyCost", "InsuranceAndMonthlyCosts")
                        .WithMany()
                        .HasForeignKey("InsuranceAndMonthlyCostsId");

                    b.HasOne("BudgetTool.Models.Models.FixedCost+LivingCost", "LivingCosts")
                        .WithMany()
                        .HasForeignKey("LivingCostsId");

                    b.HasOne("BudgetTool.Models.Models.FixedCost+LoansAndSavingsCost", "LoansAndSavingsCosts")
                        .WithMany()
                        .HasForeignKey("LoansAndSavingsCostsId");

                    b.HasOne("BudgetTool.Models.Models.FixedCost+TravellingCost", "TravellingCosts")
                        .WithMany()
                        .HasForeignKey("TravellingCostsId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
